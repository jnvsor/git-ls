#!/bin/bash
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


usage(){
    echo 'Usage: git ls [-h | --help] [-b | --batch | -c | --color] [-a | --all] [-r | --recursive] [[--] directory]'
}


dotfiles=0
colors=1
formatting=1
recursive=0

while :
do
    case "$1" in
    --help|-h)
        usage
        exit 0
        ;;

    -a|-A|-all)
        shift
        dotfiles=1
        ;;

    -c|-C|--color)
        shift
        colors=0
        ;;

    -b|-B|--batch)
        shift
        formatting=0
        colors=0
        ;;
	-r|-R|--recursive)
    shift
		recursive=1
		;;

    --)
        shift
        break
        ;;

    *)
        break
        ;;
    esac
done

if [ "$#" -ne 0 ]
then
    if [ ! -d "$1" ]
    then
        usage
        exit 1
    fi
    cd "$1"
fi

if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1
then
    git rev-parse --is-inside-work-tree
    exit 1
fi


if [ "$colors" -eq 1 ]
then
    cStaged=$'\e[0;32m'
    cUntracked=$'\e[0;31m'
    cIgnored=$'\e[0;37m'
    cHash=$'\e[0;33m'
    cReset=$'\e[0m'
fi


if [ "$dotfiles" -eq 1 ]
then
    file_length="$(ls -A | awk '{ if (length($0) > max) max = length($0) } END { print max }')"
    shopt -s dotglob
else
    file_length="$(ls | awk '{ if (length($0) > max) max = length($0) } END { print max }')"
fi

if [ -z "$file_length" ]
then
    exit 0
fi

ls-dir () {
	cd "$1"

	local comitted="$(git ls-tree --name-only HEAD)"

	for file in *
	do
	    if [ "$file" = ".git" ]
	    then
	        continue
	    fi

      if [ "$recursive" -eq 1 ]
      then
        echo -ne "$2/"
      fi
	    if [ "$formatting" -eq 0 ]
	    then
	        echo -ne "$file\t"
	    else
	        printf "%-${file_length}s\t" "$file"
	    fi

	    git diff-index --quiet --cached HEAD "$file"
	    staged=$?
	    git diff-files --quiet "$file"
	    modified=$?
      git check-ignore --quiet "$file"
      ignored=$?

	    if [ -d "$file" ]
	    then
	        untracked="$file/"
	    else
	        untracked="$file"
	    fi

	    ! git ls-files --other --error-unmatch --exclude-standard --directory "$untracked" 2>/dev/null | grep -q .
	    untracked=$?

	    if echo "$comitted" | grep -Fxq "$file"
	    then
	        if [ $staged -eq 1 ]
	        then
	            status="$cStaged"
	        elif [ $modified -eq 1 -o $untracked -eq 1 ]
	        then
	            status="$cUntracked"
	        else
	            status=""
	        fi

	        log="$(git log -1 --pretty="format:%cr"$'\t'"%H"$'\t'"%s" -- "$file")"

	        if [ "$formatting" -eq 0 ]
	        then
	            echo "$log"
	        else
	            awk -v gitlog="$log" -v status="$status" 'BEGIN {
	                tab = index(gitlog, "\t");
	                time = substr(gitlog, 0, tab - 1);
	                hash = substr(gitlog, tab + 1, 40);
	                message = substr(gitlog, tab + 42);

	                printf "%s%-8.15s'"$cReset"'\t'"$cHash"'%.7s'"$cReset"'\t%s\n", status, time, hash, message
	            }'
	        fi
	    else
	        if [ $staged -eq 1 ]
	        then
	            echo -e "${cStaged}Staged$cReset"
          elif [ $untracked -eq 1 ]
	        then
	            echo -e "${cUntracked}Untracked$cReset"
	        elif [ $ignored -eq 0 ]
	        then
	            echo -e "${cIgnored}Gitignored$cReset"
	        elif [ -z "$(find "$file" -maxdepth 0 -type d -empty 2>/dev/null)" ]
	        then
	            echo -e "${cIgnored}Gitignored$cReset"
	        else
	            echo "Empty"
	        fi
	    fi

		if [ "$recursive" -eq 1 ] && [ -d "$file" ] && [ $ignored -eq 1 ]
		then
			ls-dir "$file" "$2/$file"
			cd ../
		fi
	done
}

ls-dir . "$1"
